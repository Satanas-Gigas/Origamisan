import json
from django.core.management.base import BaseCommand
from blog.models import Word, PartOfSpeech  # –∑–∞–º–µ–Ω–∏ 'blog' –Ω–∞ —Å–≤–æ—é app, –µ—Å–ª–∏ –æ–Ω–∞ –¥—Ä—É–≥–∞—è
from tqdm import tqdm

class Command(BaseCommand):
    help = "üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç part_of_speech —É Word –∏–∑ —Ñ–∞–π–ª–∞ words_level5_with_pos_updated_last.json"

    def handle(self, *args, **options):
        INPUT_FILE = "words_level5_with_pos_updated_last.json"

        try:
            with open(INPUT_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception as e:
            self.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return

        updated = 0
        skipped = 0

        for entry in tqdm(data, desc="üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã"):
            kanji = entry.get("kanji")
            kana = entry.get("kana")
            pos_list = entry.get("part_of_speech", [])

            if not kana or not pos_list:
                skipped += 1
                continue

            # –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            words = Word.objects.filter(kana=kana)
            if kanji in [None, "", "''"]:
                words = words.filter(kanji__isnull=True)
            else:
                words = words.filter(kanji=kanji)

            if not words.exists():
                skipped += 1
                continue

            # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã PartOfSpeech
            pos_objs = []
            for pos in pos_list:
                obj, _ = PartOfSpeech.objects.get_or_create(code=pos.strip())
                pos_objs.append(obj)

            # –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–∂–¥—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            for word in words:
                word.part_of_speech.set(pos_objs)
                updated += 1

        self.stdout.write(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–æ–≤: {updated}")
        self.stdout.write(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–ª–∏ part_of_speech): {skipped}")



# import json
# import os
# from django.core.management.base import BaseCommand
# from blog.models import Grammar


# class Command(BaseCommand):
#     help = "–û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∏—Å–µ–π Grammar —Å 5 –Ω–∞ 4 –ø–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∏–∑ —Ñ–∞–π–ª–∞"

#     def handle(self, *args, **kwargs):
#         file_path = 'grammar_n4.json'
#         if not os.path.exists(file_path):
#             self.stdout.write(self.style.ERROR(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω."))
#             return

#         with open(file_path, 'r', encoding='utf-8') as f:
#             grammar_data = json.load(f)

#         titles = [item.get('title', '') for item in grammar_data]

#         # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏
#         updated_count = Grammar.objects.filter(level="5", title__in=titles).update(level="4")
#         self.stdout.write(self.style.SUCCESS(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π."))

# with open('grammar_n4.json', 'r', encoding='utf-8') as f:
#     grammar_data = json.load(f)

# titles = [item.get('title', '') for item in grammar_data]

# # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, —á—å–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
# Grammar.objects.filter(level="5", title__in=titles).update(level="4")