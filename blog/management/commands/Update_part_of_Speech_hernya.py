from django.core.management.base import BaseCommand
from blog.models import Word, PartOfSpeech
from django.db.models import Q
import json
from tqdm import tqdm

class Command(BaseCommand):
    help = "–û–±–Ω–æ–≤–ª—è–µ—Ç part_of_speech –≤ –º–æ–¥–µ–ª–∏ Word –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–∞ words_level4_with_pos.json"

    def handle(self, *args, **kwargs):
        try:
            with open('words_level4_with_pos.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
        except Exception as e:
            self.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: {e}")
            return

        updated = 0
        skipped = 0

        for item in tqdm(data, desc="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π —Ä–µ—á–∏"):
            kanji = item.get('kanji')
            kana = item.get('kana')
            pos_list = item.get('part_of_speech', [])

            if not kana:
                skipped += 1
                continue

            # –ù–∞–π—Ç–∏ Word –ø–æ kana –∏ kanji (kanji –º–æ–∂–µ—Ç –±—ã—Ç—å None)
            words = Word.objects.filter(kana=kana)
            if kanji:
                words = words.filter(kanji=kanji)
            else:
                words = words.filter(kanji__isnull=True)

            if not words.exists():
                skipped += 1
                continue

            # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã PartOfSpeech
            pos_objects = []
            for pos_code in pos_list:
                pos_obj, _ = PartOfSpeech.objects.get_or_create(code=pos_code.strip())
                pos_objects.append(pos_obj)

            # –û–±–Ω–æ–≤–∏—Ç—å part_of_speech —É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
            for word in words:
                word.part_of_speech.set(pos_objects)
                updated += 1

        self.stdout.write(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–æ–≤: {updated}")
        self.stdout.write(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î): {skipped}")
