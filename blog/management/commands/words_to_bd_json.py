import json
from django.core.management.base import BaseCommand
from blog.models import Word, PartOfSpeech
from django.contrib.auth import get_user_model
from tqdm import tqdm

User = get_user_model()


class Command(BaseCommand):
    help = "üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç N1 —Å–ª–æ–≤–∞ –∏–∑ JSON, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç translate_ru –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."

    def handle(self, *args, **options):
        INPUT_FILE = "words_n1_translated_ru.json"

        try:
            with open(INPUT_FILE, "r", encoding="utf-8") as f:
                words = json.load(f)
        except Exception as e:
            self.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return

        try:
            author = User.objects.get(username='adm')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username='adm' –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return

        created, updated = 0, 0

        for item in tqdm(words, desc="üì¶ –ò–º–ø–æ—Ä—Ç —Å–ª–æ–≤"):

            kanji = item.get("kanji")
            kana = item.get("kana")
            romaji = item.get("romaji")
            translate_en = item.get("translate_en")
            translate_ru = item.get("translate_ru")
            pos_list = item.get("part_of_speech", [])

            if not kana:
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ translate_ru: –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ ";" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if translate_ru:
                parts = translate_ru.split(";")
                translate_ru = "; ".join(part.strip() for part in parts)

            word_obj, is_created = Word.objects.get_or_create(
                kanji=None if kanji in ["", "''", None] else kanji,
                kana=kana,
                defaults={
                    "romaji": romaji,
                    "translate_en": translate_en,
                    "translate_ru": translate_ru,
                    "author": author,
                    "level": "1",
                }
            )

            if not is_created:
                word_obj.romaji = romaji
                word_obj.translate_en = translate_en
                word_obj.translate_ru = translate_ru
                word_obj.author = author
                word_obj.level = "1"
                word_obj.save()
                updated += 1
            else:
                created += 1

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ PartOfSpeech
            pos_objects = []
            for pos in pos_list:
                pos_obj, _ = PartOfSpeech.objects.get_or_create(code=pos.strip())
                pos_objects.append(pos_obj)

            word_obj.part_of_speech.set(pos_objects)

        self.stdout.write(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ: {created}")
        self.stdout.write(f"üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}")
        self.stdout.write(f"üìö –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(words)}")
