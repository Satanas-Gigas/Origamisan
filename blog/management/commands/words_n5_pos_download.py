import json
import requests
import time
from tqdm import tqdm
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = "üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç part_of_speech –∏–∑ —Ñ–∞–π–ª–∞ words_n5_missing_pos.json —Å –ø–æ–º–æ—â—å—é Jisho API"

    def handle(self, *args, **options):
        INPUT_FILE = "words_n5_missing_pos.json"
        OUTPUT_FILE = "words_level5_with_pos_updated_last.json"

        def fetch_part_of_speech(query, reading):
            url = f"https://jisho.org/api/v1/search/words?keyword={query}"
            try:
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    for entry in data.get('data', []):
                        japanese = entry.get('japanese', [])
                        if any(j.get('reading') == reading for j in japanese):
                            pos = []
                            for sense in entry.get('senses', []):
                                pos.extend(sense.get('parts_of_speech', []))
                            return list(set(pos))
            except Exception as e:
                self.stderr.write(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '{query}': {e}")
            return []

        def clean_text(value):
            if not value or not isinstance(value, str):
                return ""
            return value.strip().lstrip("„Äú").replace("„Éª„Åô„Çã", "")

        try:
            with open(INPUT_FILE, "r", encoding="utf-8") as f:
                words = json.load(f)
        except Exception as e:
            self.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return

        updated = 0
        for word in tqdm(words, desc="üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Ä–µ—á–∏", ncols=100):
            current_pos = word.get("part_of_speech", "")
            if current_pos and len(current_pos) > 0:
                continue

            kanji = word.get("kanji")
            kana = word.get("kana")

            if not kana:
                continue

            query = clean_text(kanji) if kanji and kanji != "''" else clean_text(kana)
            reading = clean_text(kana)

            pos = fetch_part_of_speech(query, reading)
            word["part_of_speech"] = pos
            updated += 1

            tqdm.write(f"‚úîÔ∏è {query}: {', '.join(pos) if pos else '‚Äî'}")
            time.sleep(1)

        try:
            with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
                json.dump(words, f, ensure_ascii=False, indent=4)
        except Exception as e:
            self.stderr.write(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return

        self.stdout.write(self.style.SUCCESS(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated}"))
        self.stdout.write(self.style.SUCCESS(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {OUTPUT_FILE}"))